// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Song {
  id           String            @id @default(uuid())
  slug         String            @unique
  name         String
  style        String
  tonality     String            @db.VarChar(3)
  duration     Int               @default(0)
  youtubeCode  String
  active       Boolean
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  urlsDownload URLDownloadSong[]
  SongOrder    SongOrder[]
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  phone        String
  password     String
  role         Role          @default(USER)
  songRequests SongRequest[]
  Order        Order[]
  active       Boolean
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Recovery {
  id        String   @id @default(uuid())
  email     String   @unique
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SongRequest {
  id        String   @id @default(uuid())
  link      String
  details   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model SongVersion {
  id              String            @id @default(uuid())
  key             SongVersionEnum   @unique
  label           String            @unique
  price           Decimal           @db.Money
  URLDownloadSong URLDownloadSong[]
  SongOrder       SongOrder[]
}

enum SongVersionEnum {
  playback
  lr
  multitrack
}

model URLDownloadSong {
  id            String       @id @default(uuid())
  url           String       @unique
  version       SongVersion? @relation(fields: [songVersionId], references: [id])
  songVersionId String?
  song          Song?        @relation(fields: [songId], references: [id])
  songId        String?
}

model Order {
  id         String      @id @default(uuid())
  songsOrder SongOrder[]
  payment    Payment?
  user       User?       @relation(fields: [userId], references: [id])
  userId     String?
  active     Boolean
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model SongOrder {
  id            String      @id @default(uuid())
  song          Song        @relation(fields: [songId], references: [id])
  version       SongVersion @relation(fields: [songVersionId], references: [id])
  order         Order       @relation(fields: [orderId], references: [id])
  orderId       String
  songId        String
  songVersionId String
}

model Payment {
  id      String        @id @default(uuid())
  status  PaymentStatus
  order   Order         @relation(fields: [orderId], references: [id])
  orderId String        @unique
}

enum PaymentStatus {
  PENDING
  REFUSED
  APPROVED
}
